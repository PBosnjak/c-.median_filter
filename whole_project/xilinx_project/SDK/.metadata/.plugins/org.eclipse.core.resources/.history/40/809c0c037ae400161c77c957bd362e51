/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xparameters.h"
#include "xbasic_types.h"
#include "xuartlite_l.h"
#include "xgpio.h"
#define n 4
//void print(char *str);

int main()
{

    init_platform();
    u32 x, y, i, j, sum, trsh,num;

    u8 flag=0;
    u32 adresa;
    adresa = XPAR_MICRON_RAM_MEM0_BASEADDR;
    u32 addUART= XPAR_UARTLITE_1_BASEADDR;

    u32 rows, columns;
    u32 data;
    u8 data1,data2,data3;
    u32 data11;

    data1 = XUartLite_RecvByte(addUART);
    data2 = XUartLite_RecvByte(addUART);
    data3 = XUartLite_RecvByte(addUART);
    columns=(data1-'0')*100+(data2-'0')*10+(data3-'0');
    data1 = XUartLite_RecvByte(addUART);
    data2 = XUartLite_RecvByte(addUART);
    data3 = XUartLite_RecvByte(addUART);
    rows=(data1-'0')*100+(data2-'0')*10+(data3-'0');

    i=0;
    flag=0;
    adresa = XPAR_MICRON_RAM_MEM0_BASEADDR;

    for(i=0;i<rows*columns;i++){
   		 data = XUartLite_RecvByte(addUART);
   		 Xil_Out32LE(adresa, data);
   		 adresa+=4;
	 }
	if(i==rows*columns) flag=1;
	adresa = XPAR_MICRON_RAM_MEM0_BASEADDR;

	if(flag==1){
		for (x = 0; x <= rows-n ; x++) {
				for (y = 0; y <= columns-n; y++) {
					num = 0;
					for (i = x; i < x + n; i++) {
						for (j = y; j < y + n; j++) {
							sum += Xil_In32LE((adresa+(4*(i*rows+j))));
							num++;
						}
					}
					trsh = sum / num;

					for (i = x; i < x + n; i++) {
						for (j = y; j < y + n; j++) {
							if ((Xil_In32LE((adresa+(4*(i*rows+j))))) < trsh) Xil_Out32LE((adresa+(4*(i*rows+j))), 0);
							else Xil_Out32LE((adresa+(4*(i*rows+j))), 255);
						}
					}
					sum = 0;
				}
			}
	}

	if(x>rows-n && y>columns-n) flag=2;
	adresa = XPAR_MICRON_RAM_MEM0_BASEADDR;

	if(flag==2){
			for(i=0;i<rows*columns;i++){
				data11 = Xil_In32LE(adresa);
				XUartLite_SendByte(addUART,data11);
				adresa+=4;
			}
	}
    return 0;
}
