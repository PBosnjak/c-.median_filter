/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xparameters.h"
#include "xbasic_types.h"
#include "xuartlite_l.h"
#include "xgpio.h"
#define n 2
//void print(char *str);

int main()
{

    init_platform();

    //xil_printf("-3\n\r");
    //print("T\r\n");
    u32 x, y, i, j, sum, trsh,num;

    u8 flag=0;
    //u8 gI[500][500];

    u32 adresa;
    adresa = XPAR_MICRON_RAM_MEM0_BASEADDR;
    u32 addUART= XPAR_UARTLITE_1_BASEADDR;



    u32 rows, columns;
    u32 data;
    //u8 p[5];
    u8 data1,data2,data3;
    u32 data11;
    //xil_printf("-1\n\r");
    //testing communication
/*while(1){
	xil_printf("1\n\r");
    data = XUartLite_RecvByte(addUART);
    xil_printf("2\n\r");
    data-=48;
    Xil_Out32LE(adresa, data);
    xil_printf("3\n\r");
    data1 = Xil_In32LE(adresa);
    xil_printf("4\n\r");
    //XUartLite_SendByte(addUART,data1);
    xil_printf("5 %d\n\r",data1);
}*/
//    print("Hello World\n\r");
   /* columns = XUartLite_RecvByte(addUART);
    Xil_Out32LE(adresa, columns);
    adresa+=4;
    columns = XUartLite_RecvByte(addUART);
    Xil_Out32LE(adresa, columns);
    adresa = XPAR_MICRON_RAM_MEM0_BASEADDR;
    data11 = Xil_In32LE(adresa);
    XUartLite_SendByte(addUART,data11);
    adresa+=4;
    data11 = Xil_In32LE(adresa);
    XUartLite_SendByte(addUART,data11);*/

    //data = XUartLite_RecvByte(addUART);
    //columns=48;
    //data1 = XUartLite_RecvByte(addUART);
    //data2 = XUartLite_RecvByte(addUART);

    //XUartLite_SendByte(addUART,data1);
    //XUartLite_SendByte(addUART,data1);
    //rows=XUartLite_RecvByte(addUART);
    //columns=XUartLite_RecvByte(addUART);
    //XUartLite_SendByte(addUART,rows);
    //XUartLite_SendByte(addUART,columns);

    data1 = XUartLite_RecvByte(addUART);
    data2 = XUartLite_RecvByte(addUART);
    data3 = XUartLite_RecvByte(addUART);
    columns=(data1-'0')*100+(data2-'0')*10+(data3-'0');
    data1 = XUartLite_RecvByte(addUART);
    data2 = XUartLite_RecvByte(addUART);
    data3 = XUartLite_RecvByte(addUART);
    rows=(data1-'0')*100+(data2-'0')*10+(data3-'0');

    i=0;
    flag=0;
    adresa = XPAR_MICRON_RAM_MEM0_BASEADDR;
    for(i=0;i<rows*columns;i++){


   		 data = XUartLite_RecvByte(addUART);

   		 Xil_Out32LE(adresa, data);
   		 //xil_printf("%d\n\r",data);
   		 adresa+=4;



 }
if(i==rows*columns) flag=1;
adresa = XPAR_MICRON_RAM_MEM0_BASEADDR;
if(flag==1){
	for (x = 0; x <= rows-n ; x++) {
	   		for (y = 0; y <= columns-n; y++) {
	   			num = 0;
	   			for (i = x; i < x + n; i++) {
	   				for (j = y; j < y + n; j++) {
	   					sum += Xil_In32LE((adresa+(4*(i*rows+j))));
	   					num++;
	   				}
	   			}
	   			trsh = sum / num;

	   			for (i = x; i < x + n; i++) {
	   				for (j = y; j < y + n; j++) {


	   					if ((Xil_In32LE((adresa+(4*(i*rows+j))))) < trsh) Xil_Out32LE((adresa+(4*(i*rows+j))), 0);
	   					else Xil_Out32LE((adresa+(4*(i*rows+j))), 255);

	   				}

	   			}
	   			sum = 0;
	   		}
	   	}
}
if(x>rows-n && y>columns-n) flag=2;
adresa = XPAR_MICRON_RAM_MEM0_BASEADDR;
if(flag==2){
		for(i=0;i<rows*columns;i++){
			data11 = Xil_In32LE(adresa);
			//if(data11==0) XUartLite_SendByte(addUART,1);
			//if(data11==0) XUartLite_SendByte(addUART,0);
			//else XUartLite_SendByte(addUART,111);
			XUartLite_SendByte(addUART,data11);
			//xil_printf("2\n\r");
			adresa+=4;
		}
}
//XUartLite_SendByte(addUART,50);
//Za provjeru unosa redova i stupaca
/*data11=columns;
data3=data11%10;
	data11=data11/10;
	data2=data11%10;
	data1=data11/10;
	XUartLite_SendByte(addUART,data1);
	XUartLite_SendByte(addUART,data2);
	XUartLite_SendByte(addUART,data3);

	data11=rows;
	data3=data11%10;
		data11=data11/10;
		data2=data11%10;
		data1=data11/10;
		XUartLite_SendByte(addUART,data1);
		XUartLite_SendByte(addUART,data2);
		XUartLite_SendByte(addUART,data3);
		*/
	//Sending back
/*
if(flag==1){
		for(i=0;i<columns*rows;i++){
			data11 = Xil_In32LE(adresa);
			data11+=2;
			data3=data11%10;
			data11=data11/10;
			data2=data11%10;
			data1=data11/10;
			XUartLite_SendByte(addUART,data1);
			XUartLite_SendByte(addUART,data2);
			XUartLite_SendByte(addUART,data3);
			adresa+=4;
		    //data1 = Xil_In32LE(adresa+4);
		}
}*/
//adresa = XPAR_MICRON_RAM_MEM0_BASEADDR;

    /*
    //Receives one data and sends back
    adresa = XPAR_MICRON_RAM_MEM0_BASEADDR;
    data1 = XUartLite_RecvByte(addUART);
    //Xil_Out32LE(adresa, data);
    data2 = XUartLite_RecvByte(addUART);
    //Xil_Out32LE(adresa+4, data);
    data3 = XUartLite_RecvByte(addUART);
    //Xil_Out32LE(adresa+8, data);
    data11=(data1-48)*100+(data2-48)*10+(data3-48);
    Xil_Out32LE(adresa, data11);
    adresa+=4;
    data1 = XUartLite_RecvByte(addUART);
    //Xil_Out32LE(adresa, data);
    data2 = XUartLite_RecvByte(addUART);
    //Xil_Out32LE(adresa+4, data);
    data3 = XUartLite_RecvByte(addUART);
    //Xil_Out32LE(adresa+8, data);
    data11=(data1-48)*100+(data2-48)*10+(data3-48);
    Xil_Out32LE(adresa, data11);

    adresa = XPAR_MICRON_RAM_MEM0_BASEADDR;
    data = Xil_In32LE(adresa);
    data+=2;
    data3=data%10;
    data=data/10;
    data2=data%10;
    data1=data/10;
    XUartLite_SendByte(addUART,data1);
    //data1 = Xil_In32LE(adresa+4);
    XUartLite_SendByte(addUART,data2);
    //data1 = Xil_In32LE(adresa+8);
    XUartLite_SendByte(addUART,data3);
    //xil_printf("%d\n\r",data);
    adresa+=4;
    data = Xil_In32LE(adresa);
        data+=3;
        data3=data%10;
        data=data/10;
        data2=data%10;
        data1=data/10;
        XUartLite_SendByte(addUART,data1);
        //data1 = Xil_In32LE(adresa+4);
        XUartLite_SendByte(addUART,data2);
        //data1 = Xil_In32LE(adresa+8);
        XUartLite_SendByte(addUART,data3);

        */
    //Receives and sends back two datas
    /*adresa = XPAR_MICRON_RAM_MEM0_BASEADDR + 0x00;
    data11 = XUartLite_RecvByte(addUART);
    Xil_Out32LE(adresa, data11);
    adresa+=4;
    data21 = XUartLite_RecvByte(addUART);
    Xil_Out32LE(adresa, data21);

    data12 = Xil_In32LE(adresa);
    XUartLite_SendByte(addUART,data12);
    data22 = Xil_In32LE(adresa);
    XUartLite_SendByte(addUART,data22);
     */
    //xil_printf("%c\n\r",columns);
    /*adresa+=4;
    rows = XUartLite_RecvByte(addUART);
    rows-=48;
    Xil_Out32LE(adresa, rows);
    //xil_printf("%c\n",rows);
    adresa=+4;

     //adresa = XPAR_MICRON_RAM_MEM0_BASEADDR;
    //columns = Xil_In32LE(adresa);
     //XUartLite_SendByte(addUART,columns);
     //adresa+=4;
     //rows = Xil_In32LE(adresa);
    //XUartLite_SendByte(addUART,rows);
     //adresa+=4;
     //load the image and store in gI (grayImage)
     //Load the image

    xil_printf("Pocinje ucitavanje u mb\n\r");
    xil_printf("Redovi: %d\n\r",rows);
    xil_printf("Stupci :%d\n\r",columns);

     for(i=0;i<rows;i++){
    	 for(j=0;j<columns;j++){
    		 //data = XUartLite_RecvByte(addUART);
    		 //data-=48;
    		 p[i][j]=1;
    		 Xil_Out32LE(adresa, p[i][j]);
    		 //xil_printf("%d\n\r",data);
    		 adresa+=4;
    	 }
     }

   adresa = (XPAR_MICRON_RAM_MEM0_BASEADDR)+0x08;
   xil_printf("Vracamo nazad\n\r");
   for(i=0;i<rows;i++){
  			 for(j=0;j<columns;j++){
  				data = Xil_In32LE(adresa);
  				//data+=48;
  				//XUartLite_SendByte(addUART,data);
  				xil_printf("%d\n\r",data);
  				adresa+=4;
  			 }
  		   }
   xil_printf("\n\rKraj\n\r");

   //The end of reading !!!!!!
   // Binarization!!!!!!!!!!!
   for (x = 0; x < rows - n; x++) {
   		for (y = 0; y < columns - n; y++) {
   			num = 0;
   			for (i = x; i < x + n; i++) {
   				for (j = y; j < y + n; j++) {
   					sum += Xil_In32LE(adresa+4*(i*rows+j));
   					num++;
   				}
   			}
   			trsh = sum / num;
   			for (i = x; i < x + n; i++) {
   				for (j = y; j < y + n; j++) {
   					if (Xil_In32LE(adresa+4*(i*rows+j)) > trsh) Xil_Out32LE(adresa+4*(i*rows+j), 0);
   					else Xil_Out32LE(adresa+4*(i*rows+j), 255);  //vidjeti kako ce biti tamo!!!!
   				}
   			}
   			sum = 0;
   		}
   	}*/
   //Sending back the image
   //xil_printf("Starting to send back!\n\r");
   //xil_printf("Vracamo nazad\n");


    /*
    a = XUartLite_RecvByte(addUART);
       //Xil_Out32LE(adresa, n);
       adresa+=4;
    m = XUartLite_RecvByte(addUART);
    Xil_Out32LE(adresa, m);

    adresa+=4;

    u32 podatak[n][m];

    	for(i=0;i<n;i++){
    		for(j=0;j<m;j++){
    			a = XUartLite_RecvByte(addUART);
    			Xil_Out32LE(adresa, podatak[i][j]);
    			adresa+=4;
    		}
    	}

    	adresa = XPAR_MICRON_RAM_MEM0_BASEADDR+8;
    	for(i=0;i<n;i++){
    	    		for(j=0;j<m;j++){
    	    			a = Xil_In32LE(adresa);
    	    			XUartLite_SendByte(addUART,a);
    	    			adresa+=4;
    	    		}
    	    	}




    	//a = XUartLite_RecvByte(0x84000000); //prima bitove uart



    		//Xil_Out32LE(adresa, podatak);	//unos(write to memory)
    		//i+=4;
    		//Xil_In32LE(adresa);				//ispis(read from memory)
    		//xil_printf("Podatak: %d\n\r", podatak);
    		//adresa = XPAR_MICRON_RAM_MEM0_BASEADDR + i;


    	//a = XUartLite_RecvByte(0x84000000); //prima bitove uart

    	//xil_printf("Podatak: %d\n\r", a);

    	//print("TEST\n\r");



//
//
//    Xil_In32LE()
//    Xil_Out32LE()

*/
    return 0;
}
